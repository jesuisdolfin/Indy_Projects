// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: liftentry.sql

package db

import (
	"context"
)

const createLiftEntry = `-- name: CreateLiftEntry :one
INSERT INTO liftentries (
	user_id,
    weight_lifted,
    reps
) VALUES (
	$1, $2, $3
) RETURNING id, user_id, weight_lifted, reps, created_at
`

type CreateLiftentryParams struct {
	UserID string `json:"userid"`
	WeightLifted string `json:"weightlifted"`
	Reps string `json:"reps"`
}

func (q *Queries) CreateLiftEntry(ctx context.Context, arg CreateLiftentryParams) (Liftentry, error) {
	row := q.db.QueryRowContext(ctx, createLiftEntry, arg.UserID, arg.WeightLifted, arg.Reps)
	var i Liftentry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WeightLifted,
		&i.Reps,
		&i.CreateAt,
	)
	return i, err
}

const deleteLiftEntry = `-- name: DeleteLiftEntry :exec
DELETE FROM liftentries
WHERE id = $1
`

func (q *Queries) DeleteLiftEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLiftEntry, id)
	return err
}

const getLiftEntry = `-- name: GetLiftEntry :one
SELECT id, user_id, weight_lifted, reps, created_at FROM liftentries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLiftEntry(ctx context.Context, id int64) (Liftentry, error) {
	row := q.db.QueryRowContext(ctx, getLiftEntry, id)
	var i Liftentry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WeightLifted,
		&i.Reps,
		&i.CreateAt,
	)
	return i, err
}

const listLiftEntries = `-- name: ListLiftEntries :many
SELECT id, user_id, weight_lifted, reps, created_at FROM liftentries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListLiftEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLiftEntries(ctx context.Context, arg ListLiftEntriesParams) ([]Liftentry, error) {
	rows, err := q.db.QueryContext(ctx, listLiftEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Liftentry
	for rows.Next() {
		var i Liftentry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WeightLifted,
			&i.Reps,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLiftEntry = `-- name: UpdateLiftEntry :one
UPDATE liftentries
SET reps = $2
WHERE id = $1
RETURNING id, user_id, weight_lifted, reps, created_at
`

type UpdateLiftentryParams struct {
	ID      int64 `json:"id"`
	Reps string `json:"reps"`
}

func (q *Queries) UpdateLiftEntry(ctx context.Context, arg UpdateLiftentryParams) (Liftentry, error) {
	row := q.db.QueryRowContext(ctx, updateLiftEntry, arg.ID, arg.Reps)
	var i Liftentry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WeightLifted,
		&i.Reps,
		&i.CreateAt,
	)
	return i, err
}
